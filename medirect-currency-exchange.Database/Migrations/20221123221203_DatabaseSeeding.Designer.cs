// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using medirect_currency_exchange.Database.Context;

#nullable disable

namespace medirectcurrencyexchange.Database.Migrations
{
    [DbContext(typeof(CurrencyExchangeDbContext))]
    [Migration("20221123221203_DatabaseSeeding")]
    partial class DatabaseSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.CurrencyExchangeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConvertedAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SourceAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CurrencyExchangeTransactions");
                });

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "jos.att@gmail.com",
                            IdCard = "13392G",
                            Name = "Joseph",
                            Surname = "Attard"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "rog.fed@gmail.com",
                            IdCard = "11223S",
                            Name = "Roger",
                            Surname = "Federer"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "raf.nad@gmail.com",
                            IdCard = "12121S",
                            Name = "Rafael",
                            Surname = "Nadal"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "and.mur@gmail.com",
                            IdCard = "12312E",
                            Name = "Andy",
                            Surname = "Murray"
                        },
                        new
                        {
                            Id = 5L,
                            Email = "nov.djo@gmail.com",
                            IdCard = "54321S",
                            Name = "Novak",
                            Surname = "Djokovic"
                        });
                });

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.CustomerWallet", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId", "CurrencyCode");

                    b.ToTable("CustomerWallets");

                    b.HasData(
                        new
                        {
                            CustomerId = 1L,
                            CurrencyCode = "EUR",
                            Amount = 1000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4223)
                        },
                        new
                        {
                            CustomerId = 1L,
                            CurrencyCode = "GBP",
                            Amount = 500m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4256)
                        },
                        new
                        {
                            CustomerId = 2L,
                            CurrencyCode = "EUR",
                            Amount = 5000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4258)
                        },
                        new
                        {
                            CustomerId = 2L,
                            CurrencyCode = "CHF",
                            Amount = 10000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4260)
                        },
                        new
                        {
                            CustomerId = 3L,
                            CurrencyCode = "EUR",
                            Amount = 6000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4262)
                        },
                        new
                        {
                            CustomerId = 3L,
                            CurrencyCode = "USD",
                            Amount = 8000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4264)
                        },
                        new
                        {
                            CustomerId = 4L,
                            CurrencyCode = "EUR",
                            Amount = 6000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4265)
                        },
                        new
                        {
                            CustomerId = 4L,
                            CurrencyCode = "GBP",
                            Amount = 8000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4267)
                        },
                        new
                        {
                            CustomerId = 5L,
                            CurrencyCode = "EUR",
                            Amount = 6000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4268)
                        },
                        new
                        {
                            CustomerId = 5L,
                            CurrencyCode = "AUD",
                            Amount = 11000m,
                            LastModified = new DateTime(2022, 11, 23, 23, 12, 2, 890, DateTimeKind.Local).AddTicks(4270)
                        });
                });

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.CurrencyExchangeTransaction", b =>
                {
                    b.HasOne("medirect_currency_exchange.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.CustomerWallet", b =>
                {
                    b.HasOne("medirect_currency_exchange.Domain.Models.Customer", "Customer")
                        .WithMany("Wallets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("medirect_currency_exchange.Domain.Models.Customer", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
